# # 강의실이 수용할 수 있는 최대 인원 수를 출력한다
# # H, W, N, M이 공백으로 입력 받음 ( 0초과 50000이하 )
# # 한 명이 앉을 수 있는 테이블이 행마다 W개씩 H행에 걸쳐 있을 때
# # 모든 참가자는 세로로 N칸 또는 가로로 M칸 이상 비우고 앉아야 한다.
# # 즉 다른 모든 참가자와 세로줄 번호의 차가 N보다 크거나
# # 가로줄 번호의 차가 M보다 큰 곳에만 앉을 수 있다.
# # 5,4,1,1 - i행 j열 자리를 (i,j)라고 할 때, (1,1)에 참가자가 앉은 경우 다른 참가자는 (1,2),(2,1),(2,2) 제외한 나머지 자리에 앉을 수 있다.
# # (2,2)의 경우 (1,1)과 행 번호 및 열 번호의 차가 1보다 크지 않으므로 앉을 수 없다.

def is_vaild_input(H, W, N, M):
    return 0 < H <= 50000 and 0 < W <= 50000 and 0 < N <= 50000 and 0 < M <= 50000

# 1. H, W, N, M 입력 받고 범위 확인
H, W, N, M = map(int, input("").split())

# 2. 앉을 수 있는 최대 인원 수 계산
# (i, j)에 앉았다면, 다음 참가자는 세로로 i + N + 1, 가로로 j + M + 1칸 떨어져 앉아야 한다.
if is_vaild_input(H, W, N, M):

    # 행에서 N+1칸 이상 떨어져 앉을 수 있는 최대 인원 수
    # 세로로는 (N+1)칸 간격을 두고 배치해야 하므로, 가능한 최대 행 수는 (H + N) // (N + 1)
    max_rows = (H + N) // (N + 1)

    # 열에서 M+1칸 이상 떨어져 앉을 수 있는 최대 인원 수
    # 가로로는 (M+1)칸 간격을 두고 배치해야 하므로, 가능한 최대 열 수는 (W + M) // (M + 1)
    max_cols = (W + M) // (M + 1)

    # 참가자들이 앉는 간격은 N+1 또는 M+1칸이지만, 마지막 남은 공간을 포함하기 위해 H나 W에 N과 M을 더해 주는 것

    max_people = max_rows * max_cols

else:
    print("입력 값이 범위를 벗어났습니다.(0 < H, W, N, M <= 50000)")

# 3. 출력
print(max_people)

# H, W, N, M = map(int, input().split())

# col = W//(M+1) + (1 if W%(M+1) > 0 else 0)
# row = H//(N+1) + (1 if H%(N+1) > 0 else 0)

# print(col*row)